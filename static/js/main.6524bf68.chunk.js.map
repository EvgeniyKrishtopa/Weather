{"version":3,"sources":["context/weatherContext.js","context/weatherReducer.js","context/types.js","context/weatherState.js","components/loader.js","components/info.js","components/form.js","App.js","serviceWorker.js","index.js"],"names":["WeatherContext","createContext","handlers","state","payload","weather","loading","clear","weatherReducer","action","type","DEFAULT","WeatherState","children","useReducer","dispatch","getWeather","city","country","a","setLoading","fetch","api_call","json","response","Provider","value","Loader","className","Info","useContext","useState","currentWeather","setWeather","weatherIcons","currentIconClasses","setIcon","useEffect","localStorage","setItem","JSON","stringify","parse","getItem","main","currentCity","temp","toFixed","join","wind","speed","humidity","Form","refNotification","useRef","setCountry","setCity","id","onSubmit","event","preventDefault","target","reset","current","style","opacity","onChange","ref","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6524bf68.chunk.js","sourcesContent":["import {createContext} from 'react';\r\n\r\nexport const WeatherContext = createContext();","import { GET_WEATHER, SET_LOADING } from \"./types\";\r\n\r\nconst handlers = {\r\n  [GET_WEATHER]: (state, {payload}) => ({...state, weather: payload, loading: false, clear: false}),\r\n  [SET_LOADING]: state => ({...state, loading: true}),\r\n  DEFAULT: state => state\r\n}\r\n\r\nconst weatherReducer = (state, action) => {\r\n  const handler = handlers[action.type] || handlers.DEFAULT\r\n  return handler(state, action)\r\n}\r\n\r\nexport default weatherReducer;","export const GET_WEATHER = 'GET_USER';\r\nexport const CLEAR_WEATHER = 'SEARCH_USERS';\r\nexport const SET_LOADING = 'SET_LOADING';","import React, {useReducer} from 'react';\r\nimport {WeatherContext} from './weatherContext';\r\nimport weatherReducer from './weatherReducer';\r\nimport { GET_WEATHER, SET_LOADING } from './types';\r\n\r\nconst WeatherState = ({children}) => {\r\n\r\n  const initialState = {\r\n    weather: null,\r\n    loading: false\r\n  }\r\n\r\n  const [state, dispatch] = useReducer(weatherReducer, initialState);\r\n  const Api_Key = \"95079fc224359f82d94b0295009b31f4\";\r\n\r\n\r\n  const getWeather = async (city,country) => {\r\n    setLoading();\r\n\r\n\r\n    const api_call = await fetch(\r\n      `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${Api_Key}`\r\n    );\r\n\r\n    const response = await api_call.json();\r\n    dispatch({\r\n      type: GET_WEATHER,\r\n      payload: response\r\n    });\r\n\r\n  }\r\n\r\n  const setLoading = () => dispatch({type: SET_LOADING});\r\n  const {weather,loading} = state;\r\n\r\n  return(\r\n    <WeatherContext.Provider value = {{getWeather,weather,loading}}>\r\n      {children}\r\n    </WeatherContext.Provider>\r\n  )\r\n}\r\n\r\nexport default WeatherState;","import React  from 'react';\r\nimport './loader.scss';\r\n\r\nconst Loader = () => {\r\n  return(\r\n    <div className=\"lds-dual-ring\"></div>\r\n  )\r\n}\r\n\r\nexport default Loader;","import React, {useContext, useState,useEffect} from 'react';\r\nimport Loader from './loader';\r\nimport { WeatherContext } from '../context/weatherContext';\r\n\r\nconst Info = () => {\r\n  const {loading,weather} = useContext(WeatherContext);\r\n  const [currentWeather,setWeather] = useState(null);\r\n\r\n  const weatherIcons = {\r\n    Thunderstorm: \"wi-thunderstorm\",\r\n    Drizzle: \"wi-sleet\",\r\n    Rain: \"wi-storm-showers\",\r\n    Snow: \"wi-snow\",\r\n    Atmosphere: \"wi-fog\",\r\n    Clear: \"wi-day-sunny\",\r\n    Clouds: \"wi-day-fog\"\r\n  };\r\n\r\n  const [currentIconClasses, setIcon] = useState(['wi','wi-flip-vertical']);\r\n\r\n  useEffect(() => {\r\n    if(weather) {\r\n      localStorage.setItem('weather', JSON.stringify(weather));\r\n    }\r\n  },[weather])\r\n\r\n  useEffect(() => {\r\n    const currentWeather = JSON.parse(localStorage.getItem('weather'));\r\n\r\n    if(currentWeather) {\r\n    const weatherDescription = currentWeather.weather[0].main;\r\n\r\n    switch(weatherDescription) {\r\n      case 'Thunderstorm':\r\n        setIcon([...currentIconClasses, weatherIcons.Thunderstorm]);\r\n        break;\r\n\r\n      case 'Drizzle':\r\n        setIcon([...currentIconClasses, weatherIcons.Drizzle]);\r\n        break;\r\n\r\n      case 'Rain':\r\n        setIcon([...currentIconClasses, weatherIcons.Rain]);\r\n        break;\r\n\r\n      case 'Snow':\r\n        setIcon([...currentIconClasses, weatherIcons.Snow]);\r\n        break;\r\n\r\n      case 'Atmosphere':\r\n        setIcon(...currentIconClasses, [weatherIcons.Atmosphere]);\r\n        break;\r\n      \r\n      case 'Clear':\r\n        setIcon([...currentIconClasses, weatherIcons.Clear]);\r\n        break;\r\n       \r\n      case 'Clouds':\r\n        setIcon([...currentIconClasses, weatherIcons.Clouds]);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n      }\r\n    }\r\n    \r\n    setWeather(currentWeather);\r\n  },[weather])\r\n\r\n  const currentCity = JSON.parse(localStorage.getItem('city'));\r\n\r\n  return(\r\n    <div className=\"weather-result\">\r\n      {loading \r\n        ? <Loader/>\r\n        :<div>\r\n            {currentWeather\r\n              ?<div>\r\n                <h3>City:&nbsp;{currentCity}</h3>\r\n                <p className=\"tepmeratureAverege\">Temperature:&nbsp;{(currentWeather.main.temp - 273.15).toFixed(2)}&nbsp;C&deg;</p>\r\n                <p className=\"weather-description\"><i className={currentIconClasses.join(' ')}></i>{currentWeather.weather[0].main}</p>\r\n                <p className=\"wind\">Wind speed:&nbsp;{currentWeather.wind.speed}km/h</p>\r\n                <p className=\"wind\">Humidity:&nbsp;{currentWeather.main.humidity}%</p>\r\n              </div>\r\n              :null\r\n            }\r\n        </div>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Info;","import React, {useContext, useState, useRef} from 'react';\r\nimport { WeatherContext } from '../context/weatherContext';\r\n\r\nconst Form = () => {\r\n  const refNotification = useRef();\r\n  const {getWeather} = useContext(WeatherContext);\r\n\r\n  const [country, setCountry] = useState('');\r\n  const [city, setCity] = useState('');\r\n\r\n  const formSubmit = event => {\r\n    event.preventDefault();\r\n    event.target.reset();\r\n\r\n    if(country && city) {\r\n      getWeather(country, city);\r\n      localStorage.setItem('city', JSON.stringify(city));\r\n      setCountry('');\r\n      setCity('');\r\n      refNotification.current.style.opacity = '0';\r\n    }\r\n\r\n    else {\r\n      refNotification.current.style.opacity = '1';\r\n      localStorage.clear();\r\n    }\r\n  }\r\n\r\n  return(\r\n      <div className=\"container\">\r\n        <h1>Weather</h1>\r\n        <form className=\"weather-form\" id=\"weatherForm\" action=\"#\" onSubmit={formSubmit}>\r\n          <div className=\"form-group\">\r\n            <label>Country\r\n              <input type=\"text\" className=\"form-control\" id=\"inputCountry\" value={country} onChange={event => setCountry(event.target.value)}/>\r\n            </label>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label>City\r\n              <input type=\"text\" className=\"form-control\" id=\"inputCity\" value={city} onChange={event => setCity(event.target.value)}/>\r\n            </label>\r\n            <p className=\"hidden\" ref={refNotification}>Enter some data please!</p>\r\n            <button type=\"submit\" className=\"btn btn-primary\">Get Weather</button>\r\n          </div>    \r\n        </form>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default Form;","import React from 'react';\nimport Weatherstate from './context/weatherState';\nimport Info from './components/info';\nimport Form from './components/form';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <Weatherstate>\n      <div className=\"wrapper\">\n        <Form/>\n        <Info/>\n      </div>\n    </Weatherstate>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}