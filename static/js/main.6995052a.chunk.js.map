{"version":3,"sources":["context/weatherContext.js","context/weatherReducer.js","context/types.js","context/weatherState.js","components/loader.js","components/info.js","components/form.js","App.js","serviceWorker.js","index.js"],"names":["WeatherContext","createContext","handlers","state","payload","weather","loading","clear","weatherReducer","action","type","DEFAULT","WeatherState","children","useReducer","dispatch","getWeather","city","country","a","setLoading","fetch","api_call","json","response","Provider","value","Loader","className","Info","useContext","useState","currentWeather","setWeather","weatherIcons","currentIconClasses","setIcon","useEffect","localStorage","setItem","JSON","stringify","parse","getItem","main","currentCity","temp","toFixed","join","wind","speed","humidity","Form","refNotification","useRef","setCountry","setCity","id","onSubmit","event","preventDefault","target","reset","current","style","opacity","onChange","ref","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6995052a.chunk.js","sourcesContent":["import {createContext} from 'react';\r\n\r\nexport const WeatherContext = createContext();","import { GET_WEATHER, SET_LOADING } from \"./types\";\r\n\r\nconst handlers = {\r\n  [GET_WEATHER]: (state, { payload }) => ({\r\n    ...state,\r\n    weather: payload,\r\n    loading: false,\r\n    clear: false,\r\n  }),\r\n  [SET_LOADING]: (state) => ({ ...state, loading: true }),\r\n  DEFAULT: (state) => state,\r\n};\r\n\r\nconst weatherReducer = (state, action) => {\r\n  const handler = handlers[action.type] || handlers.DEFAULT;\r\n  return handler(state, action);\r\n};\r\n\r\nexport default weatherReducer;\r\n","export const GET_WEATHER = 'GET_USER';\r\nexport const CLEAR_WEATHER = 'SEARCH_USERS';\r\nexport const SET_LOADING = 'SET_LOADING';","import React, { useReducer } from \"react\";\r\nimport { WeatherContext } from \"./weatherContext\";\r\nimport weatherReducer from \"./weatherReducer\";\r\nimport { GET_WEATHER, SET_LOADING } from \"./types\";\r\n\r\nconst WeatherState = ({ children }) => {\r\n  const initialState = {\r\n    weather: null,\r\n    loading: false,\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(weatherReducer, initialState);\r\n  const Api_Key = \"4f1400dc97a7e72fa59e6c3a211b7d40\";\r\n\r\n  const getWeather = async (city, country) => {\r\n    setLoading();\r\n\r\n    const api_call = await fetch(\r\n      `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${Api_Key}`\r\n    );\r\n\r\n    const response = await api_call.json();\r\n    dispatch({\r\n      type: GET_WEATHER,\r\n      payload: response,\r\n    });\r\n  };\r\n\r\n  const setLoading = () => dispatch({ type: SET_LOADING });\r\n  const { weather, loading } = state;\r\n\r\n  return (\r\n    <WeatherContext.Provider value={{ getWeather, weather, loading }}>\r\n      {children}\r\n    </WeatherContext.Provider>\r\n  );\r\n};\r\n\r\nexport default WeatherState;\r\n","import React from \"react\";\r\nimport \"./loader.scss\";\r\n\r\nconst Loader = () => {\r\n  return <div className=\"lds-dual-ring\"></div>;\r\n};\r\n\r\nexport default Loader;\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport Loader from \"./loader\";\r\nimport { WeatherContext } from \"../context/weatherContext\";\r\n\r\nconst Info = () => {\r\n  const { loading, weather } = useContext(WeatherContext);\r\n  const [currentWeather, setWeather] = useState(null);\r\n\r\n  const weatherIcons = {\r\n    Thunderstorm: \"wi-thunderstorm\",\r\n    Drizzle: \"wi-sleet\",\r\n    Rain: \"wi-storm-showers\",\r\n    Snow: \"wi-snow\",\r\n    Atmosphere: \"wi-fog\",\r\n    Clear: \"wi-day-sunny\",\r\n    Clouds: \"wi-day-fog\",\r\n  };\r\n\r\n  const [currentIconClasses, setIcon] = useState([\"wi\", \"wi-flip-vertical\"]);\r\n\r\n  useEffect(() => {\r\n    if (weather) {\r\n      localStorage.setItem(\"weather\", JSON.stringify(weather));\r\n    }\r\n  }, [weather]);\r\n\r\n  useEffect(() => {\r\n    const currentWeather = JSON.parse(localStorage.getItem(\"weather\"));\r\n\r\n    if (currentWeather) {\r\n      const weatherDescription = currentWeather.weather[0].main;\r\n\r\n      switch (weatherDescription) {\r\n        case \"Thunderstorm\":\r\n          setIcon([...currentIconClasses, weatherIcons.Thunderstorm]);\r\n          break;\r\n\r\n        case \"Drizzle\":\r\n          setIcon([...currentIconClasses, weatherIcons.Drizzle]);\r\n          break;\r\n\r\n        case \"Rain\":\r\n          setIcon([...currentIconClasses, weatherIcons.Rain]);\r\n          break;\r\n\r\n        case \"Snow\":\r\n          setIcon([...currentIconClasses, weatherIcons.Snow]);\r\n          break;\r\n\r\n        case \"Atmosphere\":\r\n          setIcon(...currentIconClasses, [weatherIcons.Atmosphere]);\r\n          break;\r\n\r\n        case \"Clear\":\r\n          setIcon([...currentIconClasses, weatherIcons.Clear]);\r\n          break;\r\n\r\n        case \"Clouds\":\r\n          setIcon([...currentIconClasses, weatherIcons.Clouds]);\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    setWeather(currentWeather);\r\n  }, [weather]);\r\n\r\n  const currentCity = JSON.parse(localStorage.getItem(\"city\"));\r\n\r\n  return (\r\n    <div className=\"weather-result\">\r\n      {loading ? (\r\n        <Loader />\r\n      ) : (\r\n        <div>\r\n          {currentWeather ? (\r\n            <div>\r\n              <h3>City:&nbsp;{currentCity}</h3>\r\n              <p className=\"tepmeratureAverege\">\r\n                Temperature:&nbsp;\r\n                {(currentWeather.main.temp - 273.15).toFixed(2)}&nbsp;C&deg;\r\n              </p>\r\n              <p className=\"weather-description\">\r\n                <i className={currentIconClasses.join(\" \")}></i>\r\n                {currentWeather.weather[0].main}\r\n              </p>\r\n              <p className=\"wind\">\r\n                Wind speed:&nbsp;{currentWeather.wind.speed}km/h\r\n              </p>\r\n              <p className=\"wind\">\r\n                Humidity:&nbsp;{currentWeather.main.humidity}%\r\n              </p>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Info;\r\n","import React, { useContext, useState, useRef } from \"react\";\r\nimport { WeatherContext } from \"../context/weatherContext\";\r\n\r\nconst Form = () => {\r\n  const refNotification = useRef();\r\n  const { getWeather } = useContext(WeatherContext);\r\n\r\n  const [country, setCountry] = useState(\"\");\r\n  const [city, setCity] = useState(\"\");\r\n\r\n  const formSubmit = (event) => {\r\n    event.preventDefault();\r\n    event.target.reset();\r\n\r\n    if (country && city) {\r\n      getWeather(country, city);\r\n      localStorage.setItem(\"city\", JSON.stringify(city));\r\n      setCountry(\"\");\r\n      setCity(\"\");\r\n      refNotification.current.style.opacity = \"0\";\r\n    } else {\r\n      refNotification.current.style.opacity = \"1\";\r\n      localStorage.clear();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Weather</h1>\r\n      <form\r\n        className=\"weather-form\"\r\n        id=\"weatherForm\"\r\n        action=\"#\"\r\n        onSubmit={formSubmit}\r\n      >\r\n        <div className=\"form-group\">\r\n          <label>\r\n            Country\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"inputCountry\"\r\n              value={country}\r\n              onChange={(event) => setCountry(event.target.value)}\r\n            />\r\n          </label>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label>\r\n            City\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"inputCity\"\r\n              value={city}\r\n              onChange={(event) => setCity(event.target.value)}\r\n            />\r\n          </label>\r\n          <p className=\"hidden\" ref={refNotification}>\r\n            Enter some data please!\r\n          </p>\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            Get Weather\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport Weatherstate from \"./context/weatherState\";\r\nimport Info from \"./components/info\";\r\nimport Form from \"./components/form\";\r\nimport \"./App.scss\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Weatherstate>\r\n      <div className=\"wrapper\">\r\n        <Form />\r\n        <Info />\r\n      </div>\r\n    </Weatherstate>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}